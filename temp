CMake Warning:
  No source or binary directory provided.  Both will be assumed to be the
  same as the current working directory, but note that this warning will
  become a fatal error in future CMake releases.


According  to CMAKE_BUILD_TYPE you are not debugging, but still you have some logging info. Do you really want to log something?
-- FORTE_MODULE_DIR: /tmp/a/org.eclipse.4diac.forte-1.14.0/src/modules/
-- FORTE_MODULE_DIR: /tmp/a/org.eclipse.4diac.forte-1.14.0/src/com/
Building executable
CMake Error at CMakeLists.txt:252 (message):
  No valid architecture chosen! Please check FORTE_ARCHITECTURE.


-- Configuring incomplete, errors occurred!
See also "/tmp/a/org.eclipse.4diac.forte-1.14.0/CMakeFiles/CMakeOutput.log".
-- Cache values
// Path to a program.
CMAKE_ADDR2LINE:FILEPATH=/usr/bin/addr2line

// Path to a program.
CMAKE_AR:FILEPATH=/usr/bin/ar

// Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel ...
CMAKE_BUILD_TYPE:STRING=

// Enable/Disable color output during build.
CMAKE_COLOR_MAKEFILE:BOOL=ON

// CXX compiler
CMAKE_CXX_COMPILER:FILEPATH=/usr/bin/c++

// A wrapper around 'ar' adding the appropriate '--plugin' option for the GCC compiler
CMAKE_CXX_COMPILER_AR:FILEPATH=/usr/bin/gcc-ar-10

// A wrapper around 'ranlib' adding the appropriate '--plugin' option for the GCC compiler
CMAKE_CXX_COMPILER_RANLIB:FILEPATH=/usr/bin/gcc-ranlib-10

// Flags used by the CXX compiler during all build types.
CMAKE_CXX_FLAGS:STRING=

// Flags used by the CXX compiler during DEBUG builds.
CMAKE_CXX_FLAGS_DEBUG:STRING=-g

// Flags used by the CXX compiler during MINSIZEREL builds.
CMAKE_CXX_FLAGS_MINSIZEREL:STRING=-Os -DNDEBUG

// Flags used by the CXX compiler during RELEASE builds.
CMAKE_CXX_FLAGS_RELEASE:STRING=-O3 -DNDEBUG

// Flags used by the CXX compiler during RELWITHDEBINFO builds.
CMAKE_CXX_FLAGS_RELWITHDEBINFO:STRING=-O2 -g -DNDEBUG

// C compiler
CMAKE_C_COMPILER:FILEPATH=/usr/bin/cc

// A wrapper around 'ar' adding the appropriate '--plugin' option for the GCC compiler
CMAKE_C_COMPILER_AR:FILEPATH=/usr/bin/gcc-ar-10

// A wrapper around 'ranlib' adding the appropriate '--plugin' option for the GCC compiler
CMAKE_C_COMPILER_RANLIB:FILEPATH=/usr/bin/gcc-ranlib-10

// Flags used by the C compiler during all build types.
CMAKE_C_FLAGS:STRING=

// Flags used by the C compiler during DEBUG builds.
CMAKE_C_FLAGS_DEBUG:STRING=-g

// Flags used by the C compiler during MINSIZEREL builds.
CMAKE_C_FLAGS_MINSIZEREL:STRING=-Os -DNDEBUG

// Flags used by the C compiler during RELEASE builds.
CMAKE_C_FLAGS_RELEASE:STRING=-O3 -DNDEBUG

// Flags used by the C compiler during RELWITHDEBINFO builds.
CMAKE_C_FLAGS_RELWITHDEBINFO:STRING=-O2 -g -DNDEBUG

// Path to a program.
CMAKE_DLLTOOL:FILEPATH=CMAKE_DLLTOOL-NOTFOUND

// Flags used by the linker during all build types.
CMAKE_EXE_LINKER_FLAGS:STRING=

// Flags used by the linker during DEBUG builds.
CMAKE_EXE_LINKER_FLAGS_DEBUG:STRING=

// Flags used by the linker during MINSIZEREL builds.
CMAKE_EXE_LINKER_FLAGS_MINSIZEREL:STRING=

// Flags used by the linker during RELEASE builds.
CMAKE_EXE_LINKER_FLAGS_RELEASE:STRING=

// Flags used by the linker during RELWITHDEBINFO builds.
CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO:STRING=

// Enable/Disable output of compile commands during generation.
CMAKE_EXPORT_COMPILE_COMMANDS:BOOL=

// Install path prefix, prepended onto install directories.
CMAKE_INSTALL_PREFIX:PATH=/usr/local

// Path to a program.
CMAKE_LINKER:FILEPATH=/usr/bin/ld

// Path to a program.
CMAKE_MAKE_PROGRAM:FILEPATH=/usr/bin/gmake

// Flags used by the linker during the creation of modules during all build types.
CMAKE_MODULE_LINKER_FLAGS:STRING=

// Flags used by the linker during the creation of modules during DEBUG builds.
CMAKE_MODULE_LINKER_FLAGS_DEBUG:STRING=

// Flags used by the linker during the creation of modules during MINSIZEREL builds.
CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL:STRING=

// Flags used by the linker during the creation of modules during RELEASE builds.
CMAKE_MODULE_LINKER_FLAGS_RELEASE:STRING=

// Flags used by the linker during the creation of modules during RELWITHDEBINFO builds.
CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO:STRING=

// Path to a program.
CMAKE_NM:FILEPATH=/usr/bin/nm

// Path to a program.
CMAKE_OBJCOPY:FILEPATH=/usr/bin/objcopy

// Path to a program.
CMAKE_OBJDUMP:FILEPATH=/usr/bin/objdump

// Path to a program.
CMAKE_RANLIB:FILEPATH=/usr/bin/ranlib

// Path to a program.
CMAKE_READELF:FILEPATH=/usr/bin/readelf

// Flags used by the linker during the creation of shared libraries during all build types.
CMAKE_SHARED_LINKER_FLAGS:STRING=

// Flags used by the linker during the creation of shared libraries during DEBUG builds.
CMAKE_SHARED_LINKER_FLAGS_DEBUG:STRING=

// Flags used by the linker during the creation of shared libraries during MINSIZEREL builds.
CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL:STRING=

// Flags used by the linker during the creation of shared libraries during RELEASE builds.
CMAKE_SHARED_LINKER_FLAGS_RELEASE:STRING=

// Flags used by the linker during the creation of shared libraries during RELWITHDEBINFO builds.
CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO:STRING=

// If set, runtime paths are not added when installing shared libraries, but are added when building.
CMAKE_SKIP_INSTALL_RPATH:BOOL=NO

// If set, runtime paths are not added when using shared libraries.
CMAKE_SKIP_RPATH:BOOL=NO

// Flags used by the linker during the creation of static libraries during all build types.
CMAKE_STATIC_LINKER_FLAGS:STRING=

// Flags used by the linker during the creation of static libraries during DEBUG builds.
CMAKE_STATIC_LINKER_FLAGS_DEBUG:STRING=

// Flags used by the linker during the creation of static libraries during MINSIZEREL builds.
CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL:STRING=

// Flags used by the linker during the creation of static libraries during RELEASE builds.
CMAKE_STATIC_LINKER_FLAGS_RELEASE:STRING=

// Flags used by the linker during the creation of static libraries during RELWITHDEBINFO builds.
CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO:STRING=

// Path to a program.
CMAKE_STRIP:FILEPATH=/usr/bin/strip

// If this value is on, makefiles will be generated without the .SILENT directive, and all commands will be echoed to the console during the make.  This is useful for debugging only. With Visual Studio IDE projects all commands are done without /nologo.
CMAKE_VERBOSE_MAKEFILE:BOOL=FALSE

// Architecture to build FORTE on
FORTE_ARCHITECTURE:STRING=None

// forte build support directory.
FORTE_BUILDSUPPORT_DIRECTORY:PATH=/tmp/a/org.eclipse.4diac.forte-1.14.0/buildsupport

// Build FORTE as an executable
FORTE_BUILD_EXECUTABLE:BOOL=ON

// Build FORTE as shared library
FORTE_BUILD_SHARED_LIBRARY:BOOL=OFF

// Build FORTE as static library
FORTE_BUILD_STATIC_LIBRARY:BOOL=OFF

// Path to the bootfile
FORTE_BootfileLocation:STRING=forte.fboot

// Enable Forte Com Ethernet
FORTE_COM_ETH:BOOL=ON

// Enable Forte Com FBDK
FORTE_COM_FBDK:BOOL=ON

// Enable an HTTP Com Layer
FORTE_COM_HTTP:BOOL=OFF

// Enable Forte local communication
FORTE_COM_LOCAL:BOOL=ON

// Enable Modbus Com Layer
FORTE_COM_MODBUS:BOOL=OFF

// Path to Modbus library directory (leave empty for installed source code)
FORTE_COM_MODBUS_LIB_DIR:PATH=

// Enable OPC communication
FORTE_COM_OPC:BOOL=OFF

// Path to Boost library root directory
FORTE_COM_OPC_BOOST_ROOT:PATH=

// Path to OPC library root directory
FORTE_COM_OPC_LIB_ROOT:PATH=

// Enable OPC UA communication layer
FORTE_COM_OPC_UA:BOOL=OFF

// Enable Paho MQTT Com Layer
FORTE_COM_PAHOMQTT:BOOL=OFF

// Enable Forte raw communication
FORTE_COM_RAW:BOOL=ON

// client to send xqueries
FORTE_COM_XqueryClient:BOOL=OFF

// forte Communication interrupt queue size
FORTE_CommunicationInterruptQueueSize:STRING=10

// Enable FORTE FMU Export. It generates a shared library
FORTE_ENABLE_FMU:BOOL=OFF

// Exclude Function blocks
FORTE_EXCLUDE_FBS:STRING=

// Path to a directory with FORTE modules located outside of the FORTE source code
FORTE_EXTERNAL_MODULES_DIRECTORY:PATH=

// forte eventchain event list size
FORTE_EventChainEventListSize:STRING=256

// forte eventchain external event list size
FORTE_EventChainExternalEventListSize:STRING=10

// Enable IO Modules
FORTE_IO:BOOL=OFF

// Support for the modular emBRICK system
FORTE_IO_EMBRICK:BOOL=OFF

// Support for X-NUCLEO-PLC01A
FORTE_IO_PLC01A1:BOOL=OFF

// FORTE ip layer recv buffer size
FORTE_IPLayerRecvBufferSize:STRING=1500

// FORTE will resolve references to the stringdict at link-stage and not compile-stage. This will reduce compiletime if the stringdict changes.
FORTE_LINKED_STRINGDICT:BOOL=ON

// Buffer's length of the logger
FORTE_LOGGER_BUFFER_SIZE:STRING=300

// Loglevel to use
FORTE_LOGLEVEL:STRING=LOGDEBUG

// forte management command protocol
FORTE_MGMCOMMANDPROTOCOL:STRING=DEV_MGR

// Max supported hierarchy that can be provided in a management commands
FORTE_MGM_MAX_SUPPORTED_NAME_HIERACHY:STRING=30

// Interacting with ADS servers
FORTE_MODULE_ADS:BOOL=OFF

// Arrowhead Function Blocks
FORTE_MODULE_Arrowhead:BOOL=OFF

// Interacting with the CONMELEON C1 IO board
FORTE_MODULE_CONMELEON_C1:BOOL=OFF

// Convert Function Blocks
FORTE_MODULE_CONVERT:BOOL=OFF

// Interacting with GPIOs of Linux-based devices via I2C using i2c-dev
FORTE_MODULE_I2C-Dev:BOOL=OFF

// IEC61131-3 Function blocks
FORTE_MODULE_IEC61131:BOOL=OFF

// I/O support for Lego Mindstorms EV3 using the ev3_dev operating system
FORTE_MODULE_LMS_EV3:BOOL=OFF

// Process interface using the MLPI functions for Bosch Rexroth PLCs
FORTE_MODULE_MLPI:BOOL=OFF

// Interacting with GPIOs and analogue inputs of the Odroid device
FORTE_MODULE_Odroid:BOOL=OFF

// openPOWERLINK Service Interface Function Blocks
FORTE_MODULE_POWERLINK:BOOL=OFF

// PiFace and PiFace like Raspberry PI expansion boards
FORTE_MODULE_PiFace:BOOL=OFF

// FORTE Online Reconfiguration
FORTE_MODULE_RECONFIGURATION:BOOL=OFF

// Function Blocks to communicate with ROS (publish/subscribe)
FORTE_MODULE_ROS:BOOL=OFF

// Real-Time Event Funktion blocks
FORTE_MODULE_RT_Events:BOOL=OFF

// Interacting with GPIOs Raspberry SPS
FORTE_MODULE_Raspberry-SPS:BOOL=OFF

// Interacting with GPIOs of linuxbased devices via the filesystem using sysfs
FORTE_MODULE_SysFs:BOOL=OFF

// FORTE UTILITY FBs
FORTE_MODULE_UTILS:BOOL=OFF

// Wago Kbus interface
FORTE_MODULE_WagoKbus:BOOL=OFF

// Interacting with GPIOs using the umic library for MicroControl
FORTE_MODULE_uMIC:BOOL=OFF

// FORTE string dict will reallocate memory if necessary when this flag is turned off
FORTE_STRINGDICTFIXEDMEMORY:BOOL=OFF

// FORTE string dict's initial max nr of strings
FORTE_STRINGDICTINITIALMAXNROFSTRINGS:STRING=300

// FORTE string dict's initial string buffer size
FORTE_STRINGDICTINITIALSTRINGBUFSIZE:STRING=8000

// Enable Forte Array Datatypes
FORTE_SUPPORT_ARRAYS:BOOL=ON

// Enable FORTE boot file loading on FORTE start-up
FORTE_SUPPORT_BOOT_FILE:BOOL=ON

// Enable Forte Custom Serializeable Datatypes
FORTE_SUPPORT_CUSTOM_SERIALIZABLE_DATATYPES:BOOL=ON

// Enable FORTE monitoring functionalities
FORTE_SUPPORT_MONITORING:BOOL=ON

// Enable support for the query management commands
FORTE_SUPPORT_QUERY_CMD:BOOL=ON

// FORTE System Tests
FORTE_SYSTEM_TESTS:BOOL=OFF

// Build Tests
FORTE_TESTS:BOOL=OFF

// Test specific include directories
FORTE_TESTS_INC_DIRS:PATH=

// Test specific library directories
FORTE_TESTS_LINK_DIRS:PATH=

// FORTE will log the events received at and sent from function blocks
FORTE_TRACE_EVENTS:BOOL=OFF

// forte sticks per second
FORTE_TicksPerSecond:STRING=1000

// Defines the time base in units per second that will be used in the TIME data type, The default value 1000000000 means 1ns
FORTE_TimeBaseUnitsPerSecond:STRING=1000000000

// Enable unicode support for STRING and WSTRING, WSTRING needs unicode support enabled!
FORTE_UNICODE_SUPPORT:BOOL=ON

// Enable Forte 64-Bit Datatypes
FORTE_USE_64BIT_DATATYPES:BOOL=ON

// Enable Lua FB types
FORTE_USE_LUATYPES:STRING=None

// Enable Forte Real Datatypes
FORTE_USE_REAL_DATATYPE:BOOL=ON

// Add the test definitions and compiler options to the base forte
FORTE_USE_TEST_CONFIG_IN_FORTE:BOOL=ON

// Enable Forte WSTRING Datatypes
FORTE_USE_WSTRING_DATATYPE:BOOL=ON